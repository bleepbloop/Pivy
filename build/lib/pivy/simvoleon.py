# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
The simvoleon module is a wrapper for the SIMVoleon library.
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simvoleon', [dirname(__file__)])
        except ImportError:
            import _simvoleon
            return _simvoleon
        if fp is not None:
            try:
                _mod = imp.load_module('_simvoleon', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _simvoleon = swig_import_helper()
    del swig_import_helper
else:
    import _simvoleon
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class charp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _simvoleon.new_charp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_charp
    __del__ = lambda self : None;
    def assign(self, *args): return _simvoleon.charp_assign(self, *args)
    def value(self): return _simvoleon.charp_value(self)
    def cast(self): return _simvoleon.charp_cast(self)
    frompointer = staticmethod(_simvoleon.charp_frompointer)
charp_swigregister = _simvoleon.charp_swigregister
charp_swigregister(charp)
cast = _simvoleon.cast

def charp_frompointer(*args):
  return _simvoleon.charp_frompointer(*args)
charp_frompointer = _simvoleon.charp_frompointer

class intp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _simvoleon.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _simvoleon.intp_assign(self, *args)
    def value(self): return _simvoleon.intp_value(self)
    def cast(self): return _simvoleon.intp_cast(self)
    frompointer = staticmethod(_simvoleon.intp_frompointer)
intp_swigregister = _simvoleon.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _simvoleon.intp_frompointer(*args)
intp_frompointer = _simvoleon.intp_frompointer

class longp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _simvoleon.new_longp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_longp
    __del__ = lambda self : None;
    def assign(self, *args): return _simvoleon.longp_assign(self, *args)
    def value(self): return _simvoleon.longp_value(self)
    def cast(self): return _simvoleon.longp_cast(self)
    frompointer = staticmethod(_simvoleon.longp_frompointer)
longp_swigregister = _simvoleon.longp_swigregister
longp_swigregister(longp)

def longp_frompointer(*args):
  return _simvoleon.longp_frompointer(*args)
longp_frompointer = _simvoleon.longp_frompointer

class floatp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _simvoleon.new_floatp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_floatp
    __del__ = lambda self : None;
    def assign(self, *args): return _simvoleon.floatp_assign(self, *args)
    def value(self): return _simvoleon.floatp_value(self)
    def cast(self): return _simvoleon.floatp_cast(self)
    frompointer = staticmethod(_simvoleon.floatp_frompointer)
floatp_swigregister = _simvoleon.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(*args):
  return _simvoleon.floatp_frompointer(*args)
floatp_frompointer = _simvoleon.floatp_frompointer

class doublep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _simvoleon.new_doublep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_doublep
    __del__ = lambda self : None;
    def assign(self, *args): return _simvoleon.doublep_assign(self, *args)
    def value(self): return _simvoleon.doublep_value(self)
    def cast(self): return _simvoleon.doublep_cast(self)
    frompointer = staticmethod(_simvoleon.doublep_frompointer)
doublep_swigregister = _simvoleon.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(*args):
  return _simvoleon.doublep_frompointer(*args)
doublep_frompointer = _simvoleon.doublep_frompointer

FALSE = _simvoleon.FALSE
TRUE = _simvoleon.TRUE
HAVE_INTTYPES_H = _simvoleon.HAVE_INTTYPES_H
HAVE_STDINT_H = _simvoleon.HAVE_STDINT_H
HAVE_SYS_TYPES_H = _simvoleon.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = _simvoleon.HAVE_STDDEF_H
HAVE_INT8_T = _simvoleon.HAVE_INT8_T
HAVE_UINT8_T = _simvoleon.HAVE_UINT8_T
HAVE_INT16_T = _simvoleon.HAVE_INT16_T
HAVE_UINT16_T = _simvoleon.HAVE_UINT16_T
HAVE_INT32_T = _simvoleon.HAVE_INT32_T
HAVE_UINT32_T = _simvoleon.HAVE_UINT32_T
HAVE_INT64_T = _simvoleon.HAVE_INT64_T
HAVE_UINT64_T = _simvoleon.HAVE_UINT64_T
HAVE_INTPTR_T = _simvoleon.HAVE_INTPTR_T
HAVE_UINTPTR_T = _simvoleon.HAVE_UINTPTR_T
M_E = _simvoleon.M_E
M_LOG2E = _simvoleon.M_LOG2E
M_LOG10E = _simvoleon.M_LOG10E
M_LN2 = _simvoleon.M_LN2
M_LN10 = _simvoleon.M_LN10
M_PI = _simvoleon.M_PI
M_TWOPI = _simvoleon.M_TWOPI
M_PI_2 = _simvoleon.M_PI_2
M_PI_4 = _simvoleon.M_PI_4
M_3PI_4 = _simvoleon.M_3PI_4
M_SQRTPI = _simvoleon.M_SQRTPI
M_1_PI = _simvoleon.M_1_PI
M_2_PI = _simvoleon.M_2_PI
M_2_SQRTPI = _simvoleon.M_2_SQRTPI
M_SQRT2 = _simvoleon.M_SQRT2
M_SQRT1_2 = _simvoleon.M_SQRT1_2
M_LN2LO = _simvoleon.M_LN2LO
M_LN2HI = _simvoleon.M_LN2HI
M_SQRT3 = _simvoleon.M_SQRT3
M_IVLN10 = _simvoleon.M_IVLN10
M_LOG2_E = _simvoleon.M_LOG2_E
M_INVLN2 = _simvoleon.M_INVLN2
COIN_MAJOR_VERSION = _simvoleon.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = _simvoleon.COIN_MINOR_VERSION
COIN_MICRO_VERSION = _simvoleon.COIN_MICRO_VERSION
COIN_VERSION = _simvoleon.COIN_VERSION
HAVE_HASH_QUOTING = _simvoleon.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = _simvoleon.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _simvoleon.new_SbDict(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SbDict
    __del__ = lambda self : None;
    def applyToAll(self, *args): return _simvoleon.SbDict_applyToAll(self, *args)
    def clear(self): return _simvoleon.SbDict_clear(self)
    def enter(self, *args): return _simvoleon.SbDict_enter(self, *args)
    def find(self, *args): return _simvoleon.SbDict_find(self, *args)
    def makePList(self, *args): return _simvoleon.SbDict_makePList(self, *args)
    def remove(self, *args): return _simvoleon.SbDict_remove(self, *args)
    def setHashingFunction(self, *args): return _simvoleon.SbDict_setHashingFunction(self, *args)
SbDict_swigregister = _simvoleon.SbDict_swigregister
SbDict_swigregister(SbDict)

class SoType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fromName = staticmethod(_simvoleon.SoType_fromName)
    def getName(self): return _simvoleon.SoType_getName(self)
    def getParent(self): return _simvoleon.SoType_getParent(self)
    def isDerivedFrom(self, *args): return _simvoleon.SoType_isDerivedFrom(self, *args)
    getAllDerivedFrom = staticmethod(_simvoleon.SoType_getAllDerivedFrom)
    def canCreateInstance(self): return _simvoleon.SoType_canCreateInstance(self)
    def getData(self): return _simvoleon.SoType_getData(self)
    def getKey(self): return _simvoleon.SoType_getKey(self)
    def __eq__(self, *args): return _simvoleon.SoType___eq__(self, *args)
    def __ne__(self, *args): return _simvoleon.SoType___ne__(self, *args)
    def __lt__(self, *args): return _simvoleon.SoType___lt__(self, *args)
    def __le__(self, *args): return _simvoleon.SoType___le__(self, *args)
    def __ge__(self, *args): return _simvoleon.SoType___ge__(self, *args)
    def __gt__(self, *args): return _simvoleon.SoType___gt__(self, *args)
    removeType = staticmethod(_simvoleon.SoType_removeType)
    init = staticmethod(_simvoleon.SoType_init)
    fromKey = staticmethod(_simvoleon.SoType_fromKey)
    badType = staticmethod(_simvoleon.SoType_badType)
    def isBad(self): return _simvoleon.SoType_isBad(self)
    def makeInternal(self): return _simvoleon.SoType_makeInternal(self)
    def isInternal(self): return _simvoleon.SoType_isInternal(self)
    getNumTypes = staticmethod(_simvoleon.SoType_getNumTypes)
    def getInstantiationMethod(self): return _simvoleon.SoType_getInstantiationMethod(self)
    def createInstance(self): return _simvoleon.SoType_createInstance(self)
    def __init__(self): 
        """__init__(self) -> SoType"""
        this = _simvoleon.new_SoType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoType
    __del__ = lambda self : None;
SoType_swigregister = _simvoleon.SoType_swigregister
SoType_swigregister(SoType)

def SoType_fromName(*args):
  return _simvoleon.SoType_fromName(*args)
SoType_fromName = _simvoleon.SoType_fromName

def SoType_getAllDerivedFrom(*args):
  return _simvoleon.SoType_getAllDerivedFrom(*args)
SoType_getAllDerivedFrom = _simvoleon.SoType_getAllDerivedFrom

def SoType_removeType(*args):
  return _simvoleon.SoType_removeType(*args)
SoType_removeType = _simvoleon.SoType_removeType

def SoType_init():
  return _simvoleon.SoType_init()
SoType_init = _simvoleon.SoType_init

def SoType_fromKey(*args):
  return _simvoleon.SoType_fromKey(*args)
SoType_fromKey = _simvoleon.SoType_fromKey

def SoType_badType():
  return _simvoleon.SoType_badType()
SoType_badType = _simvoleon.SoType_badType

def SoType_getNumTypes():
  return _simvoleon.SoType_getNumTypes()
SoType_getNumTypes = _simvoleon.SoType_getNumTypes

class SbPList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _simvoleon.new_SbPList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SbPList
    __del__ = lambda self : None;
    def copy(self, *args): return _simvoleon.SbPList_copy(self, *args)
    def fit(self): return _simvoleon.SbPList_fit(self)
    def append(self, *args): return _simvoleon.SbPList_append(self, *args)
    def find(self, *args): return _simvoleon.SbPList_find(self, *args)
    def insert(self, *args): return _simvoleon.SbPList_insert(self, *args)
    def removeItem(self, *args): return _simvoleon.SbPList_removeItem(self, *args)
    def remove(self, *args): return _simvoleon.SbPList_remove(self, *args)
    def removeFast(self, *args): return _simvoleon.SbPList_removeFast(self, *args)
    def getLength(self): return _simvoleon.SbPList_getLength(self)
    def truncate(self, *args): return _simvoleon.SbPList_truncate(self, *args)
    def getArrayPtr(self, start = 0): return _simvoleon.SbPList_getArrayPtr(self, start)
    def __eq__(self, *args): return _simvoleon.SbPList___eq__(self, *args)
    def __ne__(self, *args): return _simvoleon.SbPList___ne__(self, *args)
    def get(self, *args): return _simvoleon.SbPList_get(self, *args)
    def set(self, *args): return _simvoleon.SbPList_set(self, *args)
    def __getitem__(self, *args): return _simvoleon.SbPList___getitem__(self, *args)
    def __setitem__(self, *args): return _simvoleon.SbPList___setitem__(self, *args)
    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]

SbPList_swigregister = _simvoleon.SbPList_swigregister
SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _simvoleon.new_SbIntList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args): return _simvoleon.SbIntList_append(self, *args)
    def find(self, *args): return _simvoleon.SbIntList_find(self, *args)
    def insert(self, *args): return _simvoleon.SbIntList_insert(self, *args)
    def __setitem__(self, *args): return _simvoleon.SbIntList___setitem__(self, *args)
    def __getitem__(self, *args): return _simvoleon.SbIntList___getitem__(self, *args)
    def get(self, *args): return _simvoleon.SbIntList_get(self, *args)
    __swig_destroy__ = _simvoleon.delete_SbIntList
    __del__ = lambda self : None;
SbIntList_swigregister = _simvoleon.SbIntList_swigregister
SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = _simvoleon.new_SbString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SbString
    __del__ = lambda self : None;
    hash = staticmethod(_simvoleon.SbString_hash)
    def getLength(self): return _simvoleon.SbString_getLength(self)
    def makeEmpty(self, freeold = 1): return _simvoleon.SbString_makeEmpty(self, freeold)
    def getString(self): return _simvoleon.SbString_getString(self)
    def getSubString(self, *args): return _simvoleon.SbString_getSubString(self, *args)
    def deleteSubString(self, *args): return _simvoleon.SbString_deleteSubString(self, *args)
    def addIntString(self, *args): return _simvoleon.SbString_addIntString(self, *args)
    def __iadd__(self, *args): return _simvoleon.SbString___iadd__(self, *args)
    def compareSubString(self, *args): return _simvoleon.SbString_compareSubString(self, *args)
    def sprintf(self, *args): return _simvoleon.SbString_sprintf(self, *args)
    def apply(self, *args): return _simvoleon.SbString_apply(self, *args)
    def find(self, *args): return _simvoleon.SbString_find(self, *args)
    def findAll(self, *args): return _simvoleon.SbString_findAll(self, *args)
    def lower(self): return _simvoleon.SbString_lower(self)
    def upper(self): return _simvoleon.SbString_upper(self)
    def __eq__(self, *args): return _simvoleon.SbString___eq__(self, *args)
    def __nq__(self, *args): return _simvoleon.SbString___nq__(self, *args)
    def __getitem__(self, *args): return _simvoleon.SbString___getitem__(self, *args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(self, *args): return _simvoleon.SbString___repr__(self, *args)
SbString_swigregister = _simvoleon.SbString_swigregister
SbString_swigregister(SbString)

def SbString_hash(*args):
  return _simvoleon.SbString_hash(*args)
SbString_hash = _simvoleon.SbString_hash

class SbName(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = _simvoleon.new_SbName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SbName
    __del__ = lambda self : None;
    def getString(self): return _simvoleon.SbName_getString(self)
    def getLength(self): return _simvoleon.SbName_getLength(self)
    isIdentStartChar = staticmethod(_simvoleon.SbName_isIdentStartChar)
    isIdentChar = staticmethod(_simvoleon.SbName_isIdentChar)
    isBaseNameStartChar = staticmethod(_simvoleon.SbName_isBaseNameStartChar)
    isBaseNameChar = staticmethod(_simvoleon.SbName_isBaseNameChar)
    empty = staticmethod(_simvoleon.SbName_empty)
    def __eq__(self, *args): return _simvoleon.SbName___eq__(self, *args)
    def __nq__(self, *args): return _simvoleon.SbName___nq__(self, *args)
    def __getitem__(self, *args): return _simvoleon.SbName___getitem__(self, *args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(self, *args): return _simvoleon.SbName___repr__(self, *args)
SbName_swigregister = _simvoleon.SbName_swigregister
SbName_swigregister(SbName)

def SbName_isIdentStartChar(*args):
  return _simvoleon.SbName_isIdentStartChar(*args)
SbName_isIdentStartChar = _simvoleon.SbName_isIdentStartChar

def SbName_isIdentChar(*args):
  return _simvoleon.SbName_isIdentChar(*args)
SbName_isIdentChar = _simvoleon.SbName_isIdentChar

def SbName_isBaseNameStartChar(*args):
  return _simvoleon.SbName_isBaseNameStartChar(*args)
SbName_isBaseNameStartChar = _simvoleon.SbName_isBaseNameStartChar

def SbName_isBaseNameChar(*args):
  return _simvoleon.SbName_isBaseNameChar(*args)
SbName_isBaseNameChar = _simvoleon.SbName_isBaseNameChar

def SbName_empty():
  return _simvoleon.SbName_empty()
SbName_empty = _simvoleon.SbName_empty

class SoError(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _simvoleon.new_SoError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoError
    __del__ = lambda self : None;
    setHandlerCallback = staticmethod(_simvoleon.SoError_setHandlerCallback)
    getHandlerCallback = staticmethod(_simvoleon.SoError_getHandlerCallback)
    getHandlerData = staticmethod(_simvoleon.SoError_getHandlerData)
    def getDebugString(self): return _simvoleon.SoError_getDebugString(self)
    getClassTypeId = staticmethod(_simvoleon.SoError_getClassTypeId)
    def getTypeId(self): return _simvoleon.SoError_getTypeId(self)
    def isOfType(self, *args): return _simvoleon.SoError_isOfType(self, *args)
    post = staticmethod(_simvoleon.SoError_post)
    getString = staticmethod(_simvoleon.SoError_getString)
    initClass = staticmethod(_simvoleon.SoError_initClass)
    initClasses = staticmethod(_simvoleon.SoError_initClasses)
SoError_swigregister = _simvoleon.SoError_swigregister
SoError_swigregister(SoError)

def SoError_setHandlerCallback(*args):
  return _simvoleon.SoError_setHandlerCallback(*args)
SoError_setHandlerCallback = _simvoleon.SoError_setHandlerCallback

def SoError_getHandlerCallback():
  return _simvoleon.SoError_getHandlerCallback()
SoError_getHandlerCallback = _simvoleon.SoError_getHandlerCallback

def SoError_getHandlerData():
  return _simvoleon.SoError_getHandlerData()
SoError_getHandlerData = _simvoleon.SoError_getHandlerData

def SoError_getClassTypeId():
  return _simvoleon.SoError_getClassTypeId()
SoError_getClassTypeId = _simvoleon.SoError_getClassTypeId

def SoError_post(*args):
  return _simvoleon.SoError_post(*args)
SoError_post = _simvoleon.SoError_post

def SoError_getString(*args):
  return _simvoleon.SoError_getString(*args)
SoError_getString = _simvoleon.SoError_getString

def SoError_initClass():
  return _simvoleon.SoError_initClass()
SoError_initClass = _simvoleon.SoError_initClass

def SoError_initClasses():
  return _simvoleon.SoError_initClasses()
SoError_initClasses = _simvoleon.SoError_initClasses

class SoDebugError(SoError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ERROR = _simvoleon.SoDebugError_ERROR
    WARNING = _simvoleon.SoDebugError_WARNING
    INFO = _simvoleon.SoDebugError_INFO
    setHandlerCallback = staticmethod(_simvoleon.SoDebugError_setHandlerCallback)
    getHandlerCallback = staticmethod(_simvoleon.SoDebugError_getHandlerCallback)
    getHandlerData = staticmethod(_simvoleon.SoDebugError_getHandlerData)
    getClassTypeId = staticmethod(_simvoleon.SoDebugError_getClassTypeId)
    def getTypeId(self): return _simvoleon.SoDebugError_getTypeId(self)
    def getSeverity(self): return _simvoleon.SoDebugError_getSeverity(self)
    post = staticmethod(_simvoleon.SoDebugError_post)
    postWarning = staticmethod(_simvoleon.SoDebugError_postWarning)
    postInfo = staticmethod(_simvoleon.SoDebugError_postInfo)
    initClass = staticmethod(_simvoleon.SoDebugError_initClass)
    def __init__(self): 
        """__init__(self) -> SoDebugError"""
        this = _simvoleon.new_SoDebugError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoDebugError
    __del__ = lambda self : None;
SoDebugError_swigregister = _simvoleon.SoDebugError_swigregister
SoDebugError_swigregister(SoDebugError)

def SoDebugError_setHandlerCallback(*args):
  return _simvoleon.SoDebugError_setHandlerCallback(*args)
SoDebugError_setHandlerCallback = _simvoleon.SoDebugError_setHandlerCallback

def SoDebugError_getHandlerCallback():
  return _simvoleon.SoDebugError_getHandlerCallback()
SoDebugError_getHandlerCallback = _simvoleon.SoDebugError_getHandlerCallback

def SoDebugError_getHandlerData():
  return _simvoleon.SoDebugError_getHandlerData()
SoDebugError_getHandlerData = _simvoleon.SoDebugError_getHandlerData

def SoDebugError_getClassTypeId():
  return _simvoleon.SoDebugError_getClassTypeId()
SoDebugError_getClassTypeId = _simvoleon.SoDebugError_getClassTypeId

def SoDebugError_post(*args):
  return _simvoleon.SoDebugError_post(*args)
SoDebugError_post = _simvoleon.SoDebugError_post

def SoDebugError_postWarning(*args):
  return _simvoleon.SoDebugError_postWarning(*args)
SoDebugError_postWarning = _simvoleon.SoDebugError_postWarning

def SoDebugError_postInfo(*args):
  return _simvoleon.SoDebugError_postInfo(*args)
SoDebugError_postInfo = _simvoleon.SoDebugError_postInfo

def SoDebugError_initClass():
  return _simvoleon.SoDebugError_initClass()
SoDebugError_initClass = _simvoleon.SoDebugError_initClass

class SbVec2s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _simvoleon.new_SbVec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args): return _simvoleon.SbVec2s_setValue(self, *args)
    def getValue(self): return _simvoleon.SbVec2s_getValue(self)
    def dot(self, *args): return _simvoleon.SbVec2s_dot(self, *args)
    def negate(self): return _simvoleon.SbVec2s_negate(self)
    def __imul__(self, *args): return _simvoleon.SbVec2s___imul__(self, *args)
    def __idiv__(self, *args): return _simvoleon.SbVec2s___idiv__(self, *args)
    def __iadd__(self, *args): return _simvoleon.SbVec2s___iadd__(self, *args)
    def __isub__(self, *args): return _simvoleon.SbVec2s___isub__(self, *args)
    def __neg__(self): return _simvoleon.SbVec2s___neg__(self)
    def output(self, *args): return _simvoleon.SbVec2s_output(self, *args)
    def __add__(self, *args): return _simvoleon.SbVec2s___add__(self, *args)
    def __sub__(self, *args): return _simvoleon.SbVec2s___sub__(self, *args)
    def __mul__(self, *args): return _simvoleon.SbVec2s___mul__(self, *args)
    def __rmul__(self, *args): return _simvoleon.SbVec2s___rmul__(self, *args)
    def __div__(self, *args): return _simvoleon.SbVec2s___div__(self, *args)
    def __eq__(self, *args): return _simvoleon.SbVec2s___eq__(self, *args)
    def __nq__(self, *args): return _simvoleon.SbVec2s___nq__(self, *args)
    def __getitem__(self, *args): return _simvoleon.SbVec2s___getitem__(self, *args)
    def __setitem__(self, *args): return _simvoleon.SbVec2s___setitem__(self, *args)
    def __iter__(self):
       for i in range(2):
          yield self[i]
       
    def __len__(self):
          return 2

    __swig_destroy__ = _simvoleon.delete_SbVec2s
    __del__ = lambda self : None;
SbVec2s_swigregister = _simvoleon.SbVec2s_swigregister
SbVec2s_swigregister(SbVec2s)

class SbTime(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _simvoleon.new_SbTime(*args)
        try: self.this.append(this)
        except: self.this = this
    getTimeOfDay = staticmethod(_simvoleon.SbTime_getTimeOfDay)
    def setToTimeOfDay(self): return _simvoleon.SbTime_setToTimeOfDay(self)
    zero = staticmethod(_simvoleon.SbTime_zero)
    max = staticmethod(_simvoleon.SbTime_max)
    maxTime = staticmethod(_simvoleon.SbTime_maxTime)
    sleep = staticmethod(_simvoleon.SbTime_sleep)
    def setValue(self, *args): return _simvoleon.SbTime_setValue(self, *args)
    def setMsecValue(self, *args): return _simvoleon.SbTime_setMsecValue(self, *args)
    def getValue(self, *args): return _simvoleon.SbTime_getValue(self, *args)
    def getMsecValue(self): return _simvoleon.SbTime_getMsecValue(self)
    def format(self, fmt = "%S.%i"): return _simvoleon.SbTime_format(self, fmt)
    def formatDate(self, fmt = None): return _simvoleon.SbTime_formatDate(self, fmt)
    def parsedate(self, *args): return _simvoleon.SbTime_parsedate(self, *args)
    def __iadd__(self, *args): return _simvoleon.SbTime___iadd__(self, *args)
    def __isub__(self, *args): return _simvoleon.SbTime___isub__(self, *args)
    def __neg__(self): return _simvoleon.SbTime___neg__(self)
    def __imul__(self, *args): return _simvoleon.SbTime___imul__(self, *args)
    def __idiv__(self, *args): return _simvoleon.SbTime___idiv__(self, *args)
    def __mod__(self, *args): return _simvoleon.SbTime___mod__(self, *args)
    def __eq__(self, *args): return _simvoleon.SbTime___eq__(self, *args)
    def __ne__(self, *args): return _simvoleon.SbTime___ne__(self, *args)
    def __lt__(self, *args): return _simvoleon.SbTime___lt__(self, *args)
    def __gt__(self, *args): return _simvoleon.SbTime___gt__(self, *args)
    def __le__(self, *args): return _simvoleon.SbTime___le__(self, *args)
    def __ge__(self, *args): return _simvoleon.SbTime___ge__(self, *args)
    def output(self, *args): return _simvoleon.SbTime_output(self, *args)
    def __add__(self, *args): return _simvoleon.SbTime___add__(self, *args)
    def __sub__(self, *args): return _simvoleon.SbTime___sub__(self, *args)
    def __mul__(self, *args): return _simvoleon.SbTime___mul__(self, *args)
    def __rmul__(self, *args): return _simvoleon.SbTime___rmul__(self, *args)
    def __div__(self, *args): return _simvoleon.SbTime___div__(self, *args)
    __swig_destroy__ = _simvoleon.delete_SbTime
    __del__ = lambda self : None;
SbTime_swigregister = _simvoleon.SbTime_swigregister
SbTime_swigregister(SbTime)

def SbTime_getTimeOfDay():
  return _simvoleon.SbTime_getTimeOfDay()
SbTime_getTimeOfDay = _simvoleon.SbTime_getTimeOfDay

def SbTime_zero():
  return _simvoleon.SbTime_zero()
SbTime_zero = _simvoleon.SbTime_zero

def SbTime_max():
  return _simvoleon.SbTime_max()
SbTime_max = _simvoleon.SbTime_max

def SbTime_maxTime():
  return _simvoleon.SbTime_maxTime()
SbTime_maxTime = _simvoleon.SbTime_maxTime

def SbTime_sleep(*args):
  return _simvoleon.SbTime_sleep(*args)
SbTime_sleep = _simvoleon.SbTime_sleep

class SoEvent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _simvoleon.new_SoEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoEvent
    __del__ = lambda self : None;
    def isOfType(self, *args): return _simvoleon.SoEvent_isOfType(self, *args)
    getClassTypeId = staticmethod(_simvoleon.SoEvent_getClassTypeId)
    def getTypeId(self): return _simvoleon.SoEvent_getTypeId(self)
    def setTime(self, *args): return _simvoleon.SoEvent_setTime(self, *args)
    def getTime(self): return _simvoleon.SoEvent_getTime(self)
    def setPosition(self, *args): return _simvoleon.SoEvent_setPosition(self, *args)
    def getPosition(self, *args): return _simvoleon.SoEvent_getPosition(self, *args)
    def getNormalizedPosition(self, *args): return _simvoleon.SoEvent_getNormalizedPosition(self, *args)
    def setShiftDown(self, *args): return _simvoleon.SoEvent_setShiftDown(self, *args)
    def wasShiftDown(self): return _simvoleon.SoEvent_wasShiftDown(self)
    def setCtrlDown(self, *args): return _simvoleon.SoEvent_setCtrlDown(self, *args)
    def wasCtrlDown(self): return _simvoleon.SoEvent_wasCtrlDown(self)
    def setAltDown(self, *args): return _simvoleon.SoEvent_setAltDown(self, *args)
    def wasAltDown(self): return _simvoleon.SoEvent_wasAltDown(self)
    initClass = staticmethod(_simvoleon.SoEvent_initClass)
SoEvent_swigregister = _simvoleon.SoEvent_swigregister
SoEvent_swigregister(SoEvent)

def SoEvent_getClassTypeId():
  return _simvoleon.SoEvent_getClassTypeId()
SoEvent_getClassTypeId = _simvoleon.SoEvent_getClassTypeId

def SoEvent_initClass():
  return _simvoleon.SoEvent_initClass()
SoEvent_initClass = _simvoleon.SoEvent_initClass

class SoNotRec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONTAINER = _simvoleon.SoNotRec_CONTAINER
    PARENT = _simvoleon.SoNotRec_PARENT
    SENSOR = _simvoleon.SoNotRec_SENSOR
    FIELD = _simvoleon.SoNotRec_FIELD
    ENGINE = _simvoleon.SoNotRec_ENGINE
    def __init__(self, *args): 
        this = _simvoleon.new_SoNotRec(*args)
        try: self.this.append(this)
        except: self.this = this
    def setType(self, *args): return _simvoleon.SoNotRec_setType(self, *args)
    def getBase(self): return _simvoleon.SoNotRec_getBase(self)
    def getType(self): return _simvoleon.SoNotRec_getType(self)
    def getPrevious(self): return _simvoleon.SoNotRec_getPrevious(self)
    def setPrevious(self, *args): return _simvoleon.SoNotRec_setPrevious(self, *args)
    def output(self, *args): return _simvoleon.SoNotRec_output(self, *args)
    __swig_destroy__ = _simvoleon.delete_SoNotRec
    __del__ = lambda self : None;
SoNotRec_swigregister = _simvoleon.SoNotRec_swigregister
SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _simvoleon.new_SoNotList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args): return _simvoleon.SoNotList_append(self, *args)
    def setLastType(self, *args): return _simvoleon.SoNotList_setLastType(self, *args)
    def getFirstRec(self): return _simvoleon.SoNotList_getFirstRec(self)
    def getLastRec(self): return _simvoleon.SoNotList_getLastRec(self)
    def getFirstRecAtNode(self): return _simvoleon.SoNotList_getFirstRecAtNode(self)
    def getLastField(self): return _simvoleon.SoNotList_getLastField(self)
    def getLastEngineOutput(self): return _simvoleon.SoNotList_getLastEngineOutput(self)
    def getTimeStamp(self): return _simvoleon.SoNotList_getTimeStamp(self)
    def output(self, *args): return _simvoleon.SoNotList_output(self, *args)
    __swig_destroy__ = _simvoleon.delete_SoNotList
    __del__ = lambda self : None;
SoNotList_swigregister = _simvoleon.SoNotList_swigregister
SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simvoleon.delete_SoField
    __del__ = lambda self : None;
    initClass = staticmethod(_simvoleon.SoField_initClass)
    initClasses = staticmethod(_simvoleon.SoField_initClasses)
    cleanupClass = staticmethod(_simvoleon.SoField_cleanupClass)
    def setIgnored(self, *args): return _simvoleon.SoField_setIgnored(self, *args)
    def isIgnored(self): return _simvoleon.SoField_isIgnored(self)
    def setDefault(self, *args): return _simvoleon.SoField_setDefault(self, *args)
    def isDefault(self): return _simvoleon.SoField_isDefault(self)
    def getTypeId(self): return _simvoleon.SoField_getTypeId(self)
    getClassTypeId = staticmethod(_simvoleon.SoField_getClassTypeId)
    def isOfType(self, *args): return _simvoleon.SoField_isOfType(self, *args)
    def enableConnection(self, *args): return _simvoleon.SoField_enableConnection(self, *args)
    def isConnectionEnabled(self): return _simvoleon.SoField_isConnectionEnabled(self)
    def isConnectedFromEngine(self): return _simvoleon.SoField_isConnectedFromEngine(self)
    def getConnectedEngine(self, *args): return _simvoleon.SoField_getConnectedEngine(self, *args)
    def connectFrom(self, *args): return _simvoleon.SoField_connectFrom(self, *args)
    def appendConnection(self, *args): return _simvoleon.SoField_appendConnection(self, *args)
    def isConnectedFromField(self): return _simvoleon.SoField_isConnectedFromField(self)
    def getConnectedField(self, *args): return _simvoleon.SoField_getConnectedField(self, *args)
    def getNumConnections(self): return _simvoleon.SoField_getNumConnections(self)
    def getForwardConnections(self, *args): return _simvoleon.SoField_getForwardConnections(self, *args)
    def getConnections(self, *args): return _simvoleon.SoField_getConnections(self, *args)
    def disconnect(self, *args): return _simvoleon.SoField_disconnect(self, *args)
    def isConnected(self): return _simvoleon.SoField_isConnected(self)
    def setContainer(self, *args): return _simvoleon.SoField_setContainer(self, *args)
    def getContainer(self): return _simvoleon.SoField_getContainer(self)
    def set(self, *args): return _simvoleon.SoField_set(self, *args)
    def shouldWrite(self): return _simvoleon.SoField_shouldWrite(self)
    def touch(self): return _simvoleon.SoField_touch(self)
    def startNotify(self): return _simvoleon.SoField_startNotify(self)
    def notify(self, *args): return _simvoleon.SoField_notify(self, *args)
    def enableNotify(self, *args): return _simvoleon.SoField_enableNotify(self, *args)
    def isNotifyEnabled(self): return _simvoleon.SoField_isNotifyEnabled(self)
    def addAuditor(self, *args): return _simvoleon.SoField_addAuditor(self, *args)
    def removeAuditor(self, *args): return _simvoleon.SoField_removeAuditor(self, *args)
    def __eq__(self, *args): return _simvoleon.SoField___eq__(self, *args)
    def __ne__(self, *args): return _simvoleon.SoField___ne__(self, *args)
    def connectionStatusChanged(self, *args): return _simvoleon.SoField_connectionStatusChanged(self, *args)
    def isReadOnly(self): return _simvoleon.SoField_isReadOnly(self)
    def isSame(self, *args): return _simvoleon.SoField_isSame(self, *args)
    def copyFrom(self, *args): return _simvoleon.SoField_copyFrom(self, *args)
    def fixCopy(self, *args): return _simvoleon.SoField_fixCopy(self, *args)
    def referencesCopy(self): return _simvoleon.SoField_referencesCopy(self)
    def copyConnection(self, *args): return _simvoleon.SoField_copyConnection(self, *args)
    def read(self, *args): return _simvoleon.SoField_read(self, *args)
    def write(self, *args): return _simvoleon.SoField_write(self, *args)
    def countWriteRefs(self, *args): return _simvoleon.SoField_countWriteRefs(self, *args)
    NORMAL_FIELD = _simvoleon.SoField_NORMAL_FIELD
    EVENTIN_FIELD = _simvoleon.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = _simvoleon.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = _simvoleon.SoField_EXPOSED_FIELD
    def setFieldType(self, *args): return _simvoleon.SoField_setFieldType(self, *args)
    def getFieldType(self): return _simvoleon.SoField_getFieldType(self)
    def getDirty(self): return _simvoleon.SoField_getDirty(self)
    def setDirty(self, *args): return _simvoleon.SoField_setDirty(self, *args)
    def evaluate(self): return _simvoleon.SoField_evaluate(self)
    def get(self): return _simvoleon.SoField_get(self)
SoField_swigregister = _simvoleon.SoField_swigregister
SoField_swigregister(SoField)

def SoField_initClass():
  return _simvoleon.SoField_initClass()
SoField_initClass = _simvoleon.SoField_initClass

def SoField_initClasses():
  return _simvoleon.SoField_initClasses()
SoField_initClasses = _simvoleon.SoField_initClasses

def SoField_cleanupClass():
  return _simvoleon.SoField_cleanupClass()
SoField_cleanupClass = _simvoleon.SoField_cleanupClass

def SoField_getClassTypeId():
  return _simvoleon.SoField_getClassTypeId()
SoField_getClassTypeId = _simvoleon.SoField_getClassTypeId

class SoSField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simvoleon.delete_SoSField
    __del__ = lambda self : None;
    initClass = staticmethod(_simvoleon.SoSField_initClass)
    getClassTypeId = staticmethod(_simvoleon.SoSField_getClassTypeId)
    atexit_cleanup = staticmethod(_simvoleon.SoSField_atexit_cleanup)
SoSField_swigregister = _simvoleon.SoSField_swigregister
SoSField_swigregister(SoSField)

def SoSField_initClass():
  return _simvoleon.SoSField_initClass()
SoSField_initClass = _simvoleon.SoSField_initClass

def SoSField_getClassTypeId():
  return _simvoleon.SoSField_getClassTypeId()
SoSField_getClassTypeId = _simvoleon.SoSField_getClassTypeId

def SoSField_atexit_cleanup():
  return _simvoleon.SoSField_atexit_cleanup()
SoSField_atexit_cleanup = _simvoleon.SoSField_atexit_cleanup

class SoMField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simvoleon.delete_SoMField
    __del__ = lambda self : None;
    getClassTypeId = staticmethod(_simvoleon.SoMField_getClassTypeId)
    atexit_cleanup = staticmethod(_simvoleon.SoMField_atexit_cleanup)
    def getNum(self): return _simvoleon.SoMField_getNum(self)
    def setNum(self, *args): return _simvoleon.SoMField_setNum(self, *args)
    def deleteValues(self, *args): return _simvoleon.SoMField_deleteValues(self, *args)
    def insertSpace(self, *args): return _simvoleon.SoMField_insertSpace(self, *args)
    def set1(self, *args): return _simvoleon.SoMField_set1(self, *args)
    initClass = staticmethod(_simvoleon.SoMField_initClass)
    def enableDeleteValues(self): return _simvoleon.SoMField_enableDeleteValues(self)
    def isDeleteValuesEnabled(self): return _simvoleon.SoMField_isDeleteValuesEnabled(self)
    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1

    def __len__(self, *args): return _simvoleon.SoMField___len__(self, *args)
    def get1(self, *args): return _simvoleon.SoMField_get1(self, *args)
SoMField_swigregister = _simvoleon.SoMField_swigregister
SoMField_swigregister(SoMField)

def SoMField_getClassTypeId():
  return _simvoleon.SoMField_getClassTypeId()
SoMField_getClassTypeId = _simvoleon.SoMField_getClassTypeId

def SoMField_atexit_cleanup():
  return _simvoleon.SoMField_atexit_cleanup()
SoMField_atexit_cleanup = _simvoleon.SoMField_atexit_cleanup

def SoMField_initClass():
  return _simvoleon.SoMField_initClass()
SoMField_initClass = _simvoleon.SoMField_initClass

import coin
SIMVOLEON_MAJOR_VERSION = _simvoleon.SIMVOLEON_MAJOR_VERSION
SIMVOLEON_MINOR_VERSION = _simvoleon.SIMVOLEON_MINOR_VERSION
SIMVOLEON_MICRO_VERSION = _simvoleon.SIMVOLEON_MICRO_VERSION
SIMVOLEON_VERSION = _simvoleon.SIMVOLEON_VERSION
class SoVolumeDetail(coin.SoDetail):
    """Proxy of C++ SoVolumeDetail class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeDetail_getTypeId(self)

    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def cleanupClass():
        """cleanupClass()"""
        return _simvoleon.SoVolumeDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)
    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeDetail_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeDetail"""
        this = _simvoleon.new_SoVolumeDetail()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoVolumeDetail
    __del__ = lambda self : None;
    def copy(self):
        """copy(self) -> SoDetail"""
        return _simvoleon.SoVolumeDetail_copy(self)

    def getProfileObjectPos(self, *args):
        """getProfileObjectPos(self, SbVec3f profile)"""
        return _simvoleon.SoVolumeDetail_getProfileObjectPos(self, *args)

    def getProfileDataPos(self, profile = 0):
        """
        getProfileDataPos(self, SbVec3s profile = 0) -> int
        getProfileDataPos(self) -> int
        """
        return _simvoleon.SoVolumeDetail_getProfileDataPos(self, profile)

    def getProfileValue(self, *args):
        """
        getProfileValue(self, int index, SbVec3s pos = None, SbVec3f objpos = None, 
            SbBool flag = 0) -> unsigned int
        getProfileValue(self, int index, SbVec3s pos = None, SbVec3f objpos = None) -> unsigned int
        getProfileValue(self, int index, SbVec3s pos = None) -> unsigned int
        getProfileValue(self, int index) -> unsigned int
        """
        return _simvoleon.SoVolumeDetail_getProfileValue(self, *args)

    def getFirstNonTransparentValue(self, *args):
        """
        getFirstNonTransparentValue(self, unsigned int value, SbVec3s pos = None, SbVec3f objpos = None, 
            SbBool flag = 0) -> SbBool
        getFirstNonTransparentValue(self, unsigned int value, SbVec3s pos = None, SbVec3f objpos = None) -> SbBool
        getFirstNonTransparentValue(self, unsigned int value, SbVec3s pos = None) -> SbBool
        getFirstNonTransparentValue(self, unsigned int value) -> SbBool
        """
        return _simvoleon.SoVolumeDetail_getFirstNonTransparentValue(self, *args)

    def setDetails(self, *args):
        """setDetails(self, SbVec3f raystart, SbVec3f rayend, SoState state, SoNode caller)"""
        return _simvoleon.SoVolumeDetail_setDetails(self, *args)

SoVolumeDetail_swigregister = _simvoleon.SoVolumeDetail_swigregister
SoVolumeDetail_swigregister(SoVolumeDetail)

def SoVolumeDetail_getClassTypeId():
  """SoVolumeDetail_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeDetail_getClassTypeId()

def SoVolumeDetail_cleanupClass():
  """SoVolumeDetail_cleanupClass()"""
  return _simvoleon.SoVolumeDetail_cleanupClass()

def SoVolumeDetail_initClass():
  """SoVolumeDetail_initClass()"""
  return _simvoleon.SoVolumeDetail_initClass()

class SoVolumeRenderDetail(SoVolumeDetail):
    """Proxy of C++ SoVolumeRenderDetail class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeRenderDetail_getTypeId(self)

    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeRenderDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def cleanupClass():
        """cleanupClass()"""
        return _simvoleon.SoVolumeRenderDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)
    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeRenderDetail_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeRenderDetail"""
        this = _simvoleon.new_SoVolumeRenderDetail()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoVolumeRenderDetail
    __del__ = lambda self : None;
SoVolumeRenderDetail_swigregister = _simvoleon.SoVolumeRenderDetail_swigregister
SoVolumeRenderDetail_swigregister(SoVolumeRenderDetail)

def SoVolumeRenderDetail_getClassTypeId():
  """SoVolumeRenderDetail_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeRenderDetail_getClassTypeId()

def SoVolumeRenderDetail_cleanupClass():
  """SoVolumeRenderDetail_cleanupClass()"""
  return _simvoleon.SoVolumeRenderDetail_cleanupClass()

def SoVolumeRenderDetail_initClass():
  """SoVolumeRenderDetail_initClass()"""
  return _simvoleon.SoVolumeRenderDetail_initClass()

class SoOrthoSliceDetail(coin.SoDetail):
    """Proxy of C++ SoOrthoSliceDetail class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoOrthoSliceDetail_getTypeId(self)

    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoOrthoSliceDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def cleanupClass():
        """cleanupClass()"""
        return _simvoleon.SoOrthoSliceDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)
    def initClass():
        """initClass()"""
        return _simvoleon.SoOrthoSliceDetail_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoOrthoSliceDetail"""
        this = _simvoleon.new_SoOrthoSliceDetail()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoOrthoSliceDetail
    __del__ = lambda self : None;
    def copy(self):
        """copy(self) -> SoDetail"""
        return _simvoleon.SoOrthoSliceDetail_copy(self)

    def getValueObjectPos(self):
        """getValueObjectPos(self) -> SbVec3f"""
        return _simvoleon.SoOrthoSliceDetail_getValueObjectPos(self)

    def getValueDataPos(self):
        """getValueDataPos(self) -> SbVec3s"""
        return _simvoleon.SoOrthoSliceDetail_getValueDataPos(self)

    def getValue(self):
        """getValue(self) -> unsigned int"""
        return _simvoleon.SoOrthoSliceDetail_getValue(self)

SoOrthoSliceDetail_swigregister = _simvoleon.SoOrthoSliceDetail_swigregister
SoOrthoSliceDetail_swigregister(SoOrthoSliceDetail)

def SoOrthoSliceDetail_getClassTypeId():
  """SoOrthoSliceDetail_getClassTypeId() -> SoType"""
  return _simvoleon.SoOrthoSliceDetail_getClassTypeId()

def SoOrthoSliceDetail_cleanupClass():
  """SoOrthoSliceDetail_cleanupClass()"""
  return _simvoleon.SoOrthoSliceDetail_cleanupClass()

def SoOrthoSliceDetail_initClass():
  """SoOrthoSliceDetail_initClass()"""
  return _simvoleon.SoOrthoSliceDetail_initClass()

class SoObliqueSliceDetail(coin.SoDetail):
    """Proxy of C++ SoObliqueSliceDetail class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoObliqueSliceDetail_getTypeId(self)

    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoObliqueSliceDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def cleanupClass():
        """cleanupClass()"""
        return _simvoleon.SoObliqueSliceDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)
    def initClass():
        """initClass()"""
        return _simvoleon.SoObliqueSliceDetail_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoObliqueSliceDetail"""
        this = _simvoleon.new_SoObliqueSliceDetail()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoObliqueSliceDetail
    __del__ = lambda self : None;
    def copy(self):
        """copy(self) -> SoDetail"""
        return _simvoleon.SoObliqueSliceDetail_copy(self)

    def getValueObjectPos(self):
        """getValueObjectPos(self) -> SbVec3f"""
        return _simvoleon.SoObliqueSliceDetail_getValueObjectPos(self)

    def getValueDataPos(self):
        """getValueDataPos(self) -> SbVec3s"""
        return _simvoleon.SoObliqueSliceDetail_getValueDataPos(self)

    def getValue(self):
        """getValue(self) -> unsigned int"""
        return _simvoleon.SoObliqueSliceDetail_getValue(self)

SoObliqueSliceDetail_swigregister = _simvoleon.SoObliqueSliceDetail_swigregister
SoObliqueSliceDetail_swigregister(SoObliqueSliceDetail)

def SoObliqueSliceDetail_getClassTypeId():
  """SoObliqueSliceDetail_getClassTypeId() -> SoType"""
  return _simvoleon.SoObliqueSliceDetail_getClassTypeId()

def SoObliqueSliceDetail_cleanupClass():
  """SoObliqueSliceDetail_cleanupClass()"""
  return _simvoleon.SoObliqueSliceDetail_cleanupClass()

def SoObliqueSliceDetail_initClass():
  """SoObliqueSliceDetail_initClass()"""
  return _simvoleon.SoObliqueSliceDetail_initClass()

class SoVolumeSkinDetail(SoVolumeDetail):
    """Proxy of C++ SoVolumeSkinDetail class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeSkinDetail_getTypeId(self)

    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeSkinDetail_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def cleanupClass():
        """cleanupClass()"""
        return _simvoleon.SoVolumeSkinDetail_cleanupClass()

    cleanupClass = staticmethod(cleanupClass)
    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeSkinDetail_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeSkinDetail"""
        this = _simvoleon.new_SoVolumeSkinDetail()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoVolumeSkinDetail
    __del__ = lambda self : None;
SoVolumeSkinDetail_swigregister = _simvoleon.SoVolumeSkinDetail_swigregister
SoVolumeSkinDetail_swigregister(SoVolumeSkinDetail)

def SoVolumeSkinDetail_getClassTypeId():
  """SoVolumeSkinDetail_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeSkinDetail_getClassTypeId()

def SoVolumeSkinDetail_cleanupClass():
  """SoVolumeSkinDetail_cleanupClass()"""
  return _simvoleon.SoVolumeSkinDetail_cleanupClass()

def SoVolumeSkinDetail_initClass():
  """SoVolumeSkinDetail_initClass()"""
  return _simvoleon.SoVolumeSkinDetail_initClass()

class SoVolumeRendering(coin.SoNode):
    """Proxy of C++ SoVolumeRendering class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeRendering_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeRendering_getTypeId(self)

    def init():
        """init()"""
        return _simvoleon.SoVolumeRendering_init()

    init = staticmethod(init)
    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeRendering_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeRendering"""
        this = _simvoleon.new_SoVolumeRendering()
        try: self.this.append(this)
        except: self.this = this
    HW_VOLUMEPRO = _simvoleon.SoVolumeRendering_HW_VOLUMEPRO
    HW_3DTEXMAP = _simvoleon.SoVolumeRendering_HW_3DTEXMAP
    HW_TEXCOLORMAP = _simvoleon.SoVolumeRendering_HW_TEXCOLORMAP
    HW_TEXCOMPRESSION = _simvoleon.SoVolumeRendering_HW_TEXCOMPRESSION
    NO = _simvoleon.SoVolumeRendering_NO
    YES = _simvoleon.SoVolumeRendering_YES
    UNKNOWN = _simvoleon.SoVolumeRendering_UNKNOWN
    def isSupported(self, *args):
        """isSupported(self, HW_Feature feature) -> HW_SupportStatus"""
        return _simvoleon.SoVolumeRendering_isSupported(self, *args)

    def setReadAlternateRep(*args):
        """setReadAlternateRep(SbBool flag)"""
        return _simvoleon.SoVolumeRendering_setReadAlternateRep(*args)

    setReadAlternateRep = staticmethod(setReadAlternateRep)
    def setWriteAlternateRep(*args):
        """setWriteAlternateRep(SbBool flag)"""
        return _simvoleon.SoVolumeRendering_setWriteAlternateRep(*args)

    setWriteAlternateRep = staticmethod(setWriteAlternateRep)
    def getReadAlternateRep():
        """getReadAlternateRep() -> SbBool"""
        return _simvoleon.SoVolumeRendering_getReadAlternateRep()

    getReadAlternateRep = staticmethod(getReadAlternateRep)
    def getWriteAlternateRep():
        """getWriteAlternateRep() -> SbBool"""
        return _simvoleon.SoVolumeRendering_getWriteAlternateRep()

    getWriteAlternateRep = staticmethod(getWriteAlternateRep)
    def setDelayedRendering(*args):
        """setDelayedRendering(SbBool flag)"""
        return _simvoleon.SoVolumeRendering_setDelayedRendering(*args)

    setDelayedRendering = staticmethod(setDelayedRendering)
    def getDelayedRendering():
        """getDelayedRendering() -> SbBool"""
        return _simvoleon.SoVolumeRendering_getDelayedRendering()

    getDelayedRendering = staticmethod(getDelayedRendering)
SoVolumeRendering_swigregister = _simvoleon.SoVolumeRendering_swigregister
SoVolumeRendering_swigregister(SoVolumeRendering)

def SoVolumeRendering_getClassTypeId():
  """SoVolumeRendering_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeRendering_getClassTypeId()

def SoVolumeRendering_init():
  """SoVolumeRendering_init()"""
  return _simvoleon.SoVolumeRendering_init()

def SoVolumeRendering_initClass():
  """SoVolumeRendering_initClass()"""
  return _simvoleon.SoVolumeRendering_initClass()

def SoVolumeRendering_setReadAlternateRep(*args):
  """SoVolumeRendering_setReadAlternateRep(SbBool flag)"""
  return _simvoleon.SoVolumeRendering_setReadAlternateRep(*args)

def SoVolumeRendering_setWriteAlternateRep(*args):
  """SoVolumeRendering_setWriteAlternateRep(SbBool flag)"""
  return _simvoleon.SoVolumeRendering_setWriteAlternateRep(*args)

def SoVolumeRendering_getReadAlternateRep():
  """SoVolumeRendering_getReadAlternateRep() -> SbBool"""
  return _simvoleon.SoVolumeRendering_getReadAlternateRep()

def SoVolumeRendering_getWriteAlternateRep():
  """SoVolumeRendering_getWriteAlternateRep() -> SbBool"""
  return _simvoleon.SoVolumeRendering_getWriteAlternateRep()

def SoVolumeRendering_setDelayedRendering(*args):
  """SoVolumeRendering_setDelayedRendering(SbBool flag)"""
  return _simvoleon.SoVolumeRendering_setDelayedRendering(*args)

def SoVolumeRendering_getDelayedRendering():
  """SoVolumeRendering_getDelayedRendering() -> SbBool"""
  return _simvoleon.SoVolumeRendering_getDelayedRendering()

class SoVolumeData(SoVolumeRendering):
    """Proxy of C++ SoVolumeData class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeData_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeData_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeData_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeData"""
        this = _simvoleon.new_SoVolumeData()
        try: self.this.append(this)
        except: self.this = this
    AUTO = _simvoleon.SoVolumeData_AUTO
    TEX2D_MULTI = _simvoleon.SoVolumeData_TEX2D_MULTI
    TEX2D = _simvoleon.SoVolumeData_TEX2D
    TEX3D = _simvoleon.SoVolumeData_TEX3D
    MEMORY = _simvoleon.SoVolumeData_MEMORY
    VOLUMEPRO = _simvoleon.SoVolumeData_VOLUMEPRO
    TEX2D_SINGLE = _simvoleon.SoVolumeData_TEX2D_SINGLE
    NEAREST = _simvoleon.SoVolumeData_NEAREST
    MAX = _simvoleon.SoVolumeData_MAX
    AVERAGE = _simvoleon.SoVolumeData_AVERAGE
    NONE = _simvoleon.SoVolumeData_NONE
    CONSTANT = _simvoleon.SoVolumeData_CONSTANT
    LINEAR = _simvoleon.SoVolumeData_LINEAR
    CUBIC = _simvoleon.SoVolumeData_CUBIC
    UNSIGNED_BYTE = _simvoleon.SoVolumeData_UNSIGNED_BYTE
    UNSIGNED_SHORT = _simvoleon.SoVolumeData_UNSIGNED_SHORT
    fileName = _swig_property(_simvoleon.SoVolumeData_fileName_get, _simvoleon.SoVolumeData_fileName_set)
    storageHint = _swig_property(_simvoleon.SoVolumeData_storageHint_get, _simvoleon.SoVolumeData_storageHint_set)
    usePalettedTexture = _swig_property(_simvoleon.SoVolumeData_usePalettedTexture_get, _simvoleon.SoVolumeData_usePalettedTexture_set)
    useSharedPalettedTexture = _swig_property(_simvoleon.SoVolumeData_useSharedPalettedTexture_get, _simvoleon.SoVolumeData_useSharedPalettedTexture_set)
    useCompressedTexture = _swig_property(_simvoleon.SoVolumeData_useCompressedTexture_get, _simvoleon.SoVolumeData_useCompressedTexture_set)
    def getVolumeData(self, *args):
        """
        getVolumeData(self, SbVec3s dimension, void data, DataType type, int significantbits = None) -> SbBool
        getVolumeData(self, SbVec3s dimension, void data, DataType type) -> SbBool
        """
        return _simvoleon.SoVolumeData_getVolumeData(self, *args)

    def getVoxelValue(self, *args):
        """getVoxelValue(self, SbVec3s voxelpos) -> uint32_t"""
        return _simvoleon.SoVolumeData_getVoxelValue(self, *args)

    def setVolumeSize(self, *args):
        """setVolumeSize(self, SbBox3f size)"""
        return _simvoleon.SoVolumeData_setVolumeSize(self, *args)

    def getVolumeSize(self):
        """getVolumeSize(self) -> SbBox3f"""
        return _simvoleon.SoVolumeData_getVolumeSize(self)

    def setPageSize(self, *args):
        """
        setPageSize(self, int size)
        setPageSize(self, SbVec3s size)
        """
        return _simvoleon.SoVolumeData_setPageSize(self, *args)

    def getPageSize(self):
        """getPageSize(self) -> SbVec3s"""
        return _simvoleon.SoVolumeData_getPageSize(self)

    def setReader(self, *args):
        """setReader(self, SoVolumeReader reader)"""
        return _simvoleon.SoVolumeData_setReader(self, *args)

    def getReader(self):
        """getReader(self) -> SoVolumeReader"""
        return _simvoleon.SoVolumeData_getReader(self)

    def setTexMemorySize(self, *args):
        """setTexMemorySize(self, int megatexels)"""
        return _simvoleon.SoVolumeData_setTexMemorySize(self, *args)

    def getTexMemorySize(self):
        """getTexMemorySize(self) -> int"""
        return _simvoleon.SoVolumeData_getTexMemorySize(self)

    def getMinMax(self, *args):
        """getMinMax(self, int minval, int maxval) -> SbBool"""
        return _simvoleon.SoVolumeData_getMinMax(self, *args)

    def getHistogram(self, *args):
        """getHistogram(self, int length, int histogram) -> SbBool"""
        return _simvoleon.SoVolumeData_getHistogram(self, *args)

    def subSetting(self, *args):
        """subSetting(self, SbBox3s region) -> SoVolumeData"""
        return _simvoleon.SoVolumeData_subSetting(self, *args)

    def updateRegions(self, *args):
        """updateRegions(self, SbBox3s region, int num)"""
        return _simvoleon.SoVolumeData_updateRegions(self, *args)

    def loadRegions(self, *args):
        """loadRegions(self, SbBox3s region, int num, SoState state, SoTransferFunction node)"""
        return _simvoleon.SoVolumeData_loadRegions(self, *args)

    def reSampling(self, *args):
        """
        reSampling(self, SbVec3s dimension, SubMethod subMethod, OverMethod arg2 = NONE) -> SoVolumeData
        reSampling(self, SbVec3s dimension, SubMethod subMethod) -> SoVolumeData
        """
        return _simvoleon.SoVolumeData_reSampling(self, *args)

    def enableSubSampling(self, *args):
        """enableSubSampling(self, SbBool enable)"""
        return _simvoleon.SoVolumeData_enableSubSampling(self, *args)

    def isSubSamplingEnabled(self):
        """isSubSamplingEnabled(self) -> SbBool"""
        return _simvoleon.SoVolumeData_isSubSamplingEnabled(self)

    def enableAutoSubSampling(self, *args):
        """enableAutoSubSampling(self, SbBool enable)"""
        return _simvoleon.SoVolumeData_enableAutoSubSampling(self, *args)

    def isAutoSubSamplingEnabled(self):
        """isAutoSubSamplingEnabled(self) -> SbBool"""
        return _simvoleon.SoVolumeData_isAutoSubSamplingEnabled(self)

    def enableAutoUnSampling(self, *args):
        """enableAutoUnSampling(self, SbBool enable)"""
        return _simvoleon.SoVolumeData_enableAutoUnSampling(self, *args)

    def isAutoUnSamplingEnabled(self):
        """isAutoUnSamplingEnabled(self) -> SbBool"""
        return _simvoleon.SoVolumeData_isAutoUnSamplingEnabled(self)

    def unSample(self):
        """unSample(self)"""
        return _simvoleon.SoVolumeData_unSample(self)

    def setSubSamplingMethod(self, *args):
        """setSubSamplingMethod(self, SubMethod method)"""
        return _simvoleon.SoVolumeData_setSubSamplingMethod(self, *args)

    def getSubSamplingMethod(self):
        """getSubSamplingMethod(self) -> SubMethod"""
        return _simvoleon.SoVolumeData_getSubSamplingMethod(self)

    def setSubSamplingLevel(self, *args):
        """setSubSamplingLevel(self, SbVec3s roi, SbVec3s secondary)"""
        return _simvoleon.SoVolumeData_setSubSamplingLevel(self, *args)

    def getSubSamplingLevel(self, *args):
        """getSubSamplingLevel(self, SbVec3s roi, SbVec3s secondary)"""
        return _simvoleon.SoVolumeData_getSubSamplingLevel(self, *args)

    def setVolumeData(self, *args):
        """setVolumeData(self, SbVec3s dimension, char data)"""
        return _simvoleon.SoVolumeData_setVolumeData(self, *args)

SoVolumeData_swigregister = _simvoleon.SoVolumeData_swigregister
SoVolumeData_swigregister(SoVolumeData)

def SoVolumeData_getClassTypeId():
  """SoVolumeData_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeData_getClassTypeId()

def SoVolumeData_initClass():
  """SoVolumeData_initClass()"""
  return _simvoleon.SoVolumeData_initClass()

class SoVolumeReader(object):
    """Proxy of C++ SoVolumeReader class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simvoleon.delete_SoVolumeReader
    __del__ = lambda self : None;
    def setUserData(self, *args):
        """setUserData(self, void data)"""
        return _simvoleon.SoVolumeReader_setUserData(self, *args)

    def getNumSignificantBits(self):
        """getNumSignificantBits(self) -> int"""
        return _simvoleon.SoVolumeReader_getNumSignificantBits(self)

    def getDataChar(self, *args):
        """getDataChar(self, SbBox3f size, DataType type, SbVec3s dim)"""
        return _simvoleon.SoVolumeReader_getDataChar(self, *args)

    COPY = _simvoleon.SoVolumeReader_COPY
    NO_COPY = _simvoleon.SoVolumeReader_NO_COPY
    NO_COPY_AND_DELETE = _simvoleon.SoVolumeReader_NO_COPY_AND_DELETE
    def getSubSlice(self, *args):
        """getSubSlice(self, SbBox2s slice, int slicenumber, void voxels)"""
        return _simvoleon.SoVolumeReader_getSubSlice(self, *args)

    def getSubVolume(self, *args):
        """
        getSubVolume(self, SbBox3s volume, void voxels) -> SbBool
        getSubVolume(self, SbBox3s volume, SbVec3s subsamplelevel, void voxels) -> SbBool
        """
        return _simvoleon.SoVolumeReader_getSubVolume(self, *args)

    def getSubVolumeInfo(self, *args):
        """
        getSubVolumeInfo(self, SbBox3s volume, SbVec3s reqsubsamplelevel, SbVec3s subsamplelevel, 
            CopyPolicy policy) -> SbBool
        """
        return _simvoleon.SoVolumeReader_getSubVolumeInfo(self, *args)

    def getNumVoxels(self, *args):
        """getNumVoxels(self, SbVec3s realsize, SbVec3s subsamplinglevel) -> SbVec3s"""
        return _simvoleon.SoVolumeReader_getNumVoxels(self, *args)

    def getSizeToAllocate(self, *args):
        """getSizeToAllocate(self, SbVec3s realsize, SbVec3s subsamplinglevel) -> SbVec3s"""
        return _simvoleon.SoVolumeReader_getSizeToAllocate(self, *args)

    def setFilename(self, *args):
        """setFilename(self, char filename) -> int"""
        return _simvoleon.SoVolumeReader_setFilename(self, *args)

SoVolumeReader_swigregister = _simvoleon.SoVolumeReader_swigregister
SoVolumeReader_swigregister(SoVolumeReader)

class SoVRVolFileReader(SoVolumeReader):
    """Proxy of C++ SoVRVolFileReader class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SoVRVolFileReader"""
        this = _simvoleon.new_SoVRVolFileReader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _simvoleon.delete_SoVRVolFileReader
    __del__ = lambda self : None;
    def getDataChar(self, *args):
        """getDataChar(self, SbBox3f size, DataType type, SbVec3s dim)"""
        return _simvoleon.SoVRVolFileReader_getDataChar(self, *args)

    def getSubSlice(self, *args):
        """getSubSlice(self, SbBox2s subslice, int slicenumber, void data)"""
        return _simvoleon.SoVRVolFileReader_getSubSlice(self, *args)

    def setUserData(self, *args):
        """setUserData(self, char filename)"""
        return _simvoleon.SoVRVolFileReader_setUserData(self, *args)

SoVRVolFileReader_swigregister = _simvoleon.SoVRVolFileReader_swigregister
SoVRVolFileReader_swigregister(SoVRVolFileReader)

class SoTransferFunction(SoVolumeRendering):
    """Proxy of C++ SoTransferFunction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoTransferFunction_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoTransferFunction_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoTransferFunction_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoTransferFunction"""
        this = _simvoleon.new_SoTransferFunction()
        try: self.this.append(this)
        except: self.this = this
    NONE = _simvoleon.SoTransferFunction_NONE
    GREY = _simvoleon.SoTransferFunction_GREY
    GRAY = _simvoleon.SoTransferFunction_GRAY
    TEMPERATURE = _simvoleon.SoTransferFunction_TEMPERATURE
    PHYSICS = _simvoleon.SoTransferFunction_PHYSICS
    STANDARD = _simvoleon.SoTransferFunction_STANDARD
    GLOW = _simvoleon.SoTransferFunction_GLOW
    BLUE_RED = _simvoleon.SoTransferFunction_BLUE_RED
    SEISMIC = _simvoleon.SoTransferFunction_SEISMIC
    ALPHA = _simvoleon.SoTransferFunction_ALPHA
    LUM_ALPHA = _simvoleon.SoTransferFunction_LUM_ALPHA
    RGBA = _simvoleon.SoTransferFunction_RGBA
    shift = _swig_property(_simvoleon.SoTransferFunction_shift_get, _simvoleon.SoTransferFunction_shift_set)
    offset = _swig_property(_simvoleon.SoTransferFunction_offset_get, _simvoleon.SoTransferFunction_offset_set)
    predefColorMap = _swig_property(_simvoleon.SoTransferFunction_predefColorMap_get, _simvoleon.SoTransferFunction_predefColorMap_set)
    colorMapType = _swig_property(_simvoleon.SoTransferFunction_colorMapType_get, _simvoleon.SoTransferFunction_colorMapType_set)
    colorMap = _swig_property(_simvoleon.SoTransferFunction_colorMap_get, _simvoleon.SoTransferFunction_colorMap_set)
    def reMap(self, *args):
        """reMap(self, int low, int high)"""
        return _simvoleon.SoTransferFunction_reMap(self, *args)

    def hasTransparency(self):
        """hasTransparency(self) -> SbBool"""
        return _simvoleon.SoTransferFunction_hasTransparency(self)

SoTransferFunction_swigregister = _simvoleon.SoTransferFunction_swigregister
SoTransferFunction_swigregister(SoTransferFunction)

def SoTransferFunction_getClassTypeId():
  """SoTransferFunction_getClassTypeId() -> SoType"""
  return _simvoleon.SoTransferFunction_getClassTypeId()

def SoTransferFunction_initClass():
  """SoTransferFunction_initClass()"""
  return _simvoleon.SoTransferFunction_initClass()

class SoOrthoSlice(coin.SoShape):
    """Proxy of C++ SoOrthoSlice class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoOrthoSlice_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoOrthoSlice_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoOrthoSlice_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoOrthoSlice"""
        this = _simvoleon.new_SoOrthoSlice()
        try: self.this.append(this)
        except: self.this = this
    X = _simvoleon.SoOrthoSlice_X
    Y = _simvoleon.SoOrthoSlice_Y
    Z = _simvoleon.SoOrthoSlice_Z
    NEAREST = _simvoleon.SoOrthoSlice_NEAREST
    LINEAR = _simvoleon.SoOrthoSlice_LINEAR
    ALPHA_AS_IS = _simvoleon.SoOrthoSlice_ALPHA_AS_IS
    ALPHA_OPAQUE = _simvoleon.SoOrthoSlice_ALPHA_OPAQUE
    ALPHA_BINARY = _simvoleon.SoOrthoSlice_ALPHA_BINARY
    FRONT = _simvoleon.SoOrthoSlice_FRONT
    BACK = _simvoleon.SoOrthoSlice_BACK
    sliceNumber = _swig_property(_simvoleon.SoOrthoSlice_sliceNumber_get, _simvoleon.SoOrthoSlice_sliceNumber_set)
    axis = _swig_property(_simvoleon.SoOrthoSlice_axis_get, _simvoleon.SoOrthoSlice_axis_set)
    interpolation = _swig_property(_simvoleon.SoOrthoSlice_interpolation_get, _simvoleon.SoOrthoSlice_interpolation_set)
    alphaUse = _swig_property(_simvoleon.SoOrthoSlice_alphaUse_get, _simvoleon.SoOrthoSlice_alphaUse_set)
    clippingSide = _swig_property(_simvoleon.SoOrthoSlice_clippingSide_get, _simvoleon.SoOrthoSlice_clippingSide_set)
    clipping = _swig_property(_simvoleon.SoOrthoSlice_clipping_get, _simvoleon.SoOrthoSlice_clipping_set)
    alternateRep = _swig_property(_simvoleon.SoOrthoSlice_alternateRep_get, _simvoleon.SoOrthoSlice_alternateRep_set)
    def affectsState(self):
        """affectsState(self) -> SbBool"""
        return _simvoleon.SoOrthoSlice_affectsState(self)

SoOrthoSlice_swigregister = _simvoleon.SoOrthoSlice_swigregister
SoOrthoSlice_swigregister(SoOrthoSlice)

def SoOrthoSlice_getClassTypeId():
  """SoOrthoSlice_getClassTypeId() -> SoType"""
  return _simvoleon.SoOrthoSlice_getClassTypeId()

def SoOrthoSlice_initClass():
  """SoOrthoSlice_initClass()"""
  return _simvoleon.SoOrthoSlice_initClass()

class SoVolumeRender(coin.SoShape):
    """Proxy of C++ SoVolumeRender class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeRender_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeRender_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeRender_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeRender"""
        this = _simvoleon.new_SoVolumeRender()
        try: self.this.append(this)
        except: self.this = this
    NEAREST = _simvoleon.SoVolumeRender_NEAREST
    LINEAR = _simvoleon.SoVolumeRender_LINEAR
    MAX_INTENSITY = _simvoleon.SoVolumeRender_MAX_INTENSITY
    SUM_INTENSITY = _simvoleon.SoVolumeRender_SUM_INTENSITY
    ALPHA_BLENDING = _simvoleon.SoVolumeRender_ALPHA_BLENDING
    ALL = _simvoleon.SoVolumeRender_ALL
    MANUAL = _simvoleon.SoVolumeRender_MANUAL
    AUTOMATIC = _simvoleon.SoVolumeRender_AUTOMATIC
    CONTINUE = _simvoleon.SoVolumeRender_CONTINUE
    ABORT = _simvoleon.SoVolumeRender_ABORT
    SKIP = _simvoleon.SoVolumeRender_SKIP
    interpolation = _swig_property(_simvoleon.SoVolumeRender_interpolation_get, _simvoleon.SoVolumeRender_interpolation_set)
    composition = _swig_property(_simvoleon.SoVolumeRender_composition_get, _simvoleon.SoVolumeRender_composition_set)
    lighting = _swig_property(_simvoleon.SoVolumeRender_lighting_get, _simvoleon.SoVolumeRender_lighting_set)
    lightDirection = _swig_property(_simvoleon.SoVolumeRender_lightDirection_get, _simvoleon.SoVolumeRender_lightDirection_set)
    lightIntensity = _swig_property(_simvoleon.SoVolumeRender_lightIntensity_get, _simvoleon.SoVolumeRender_lightIntensity_set)
    numSlicesControl = _swig_property(_simvoleon.SoVolumeRender_numSlicesControl_get, _simvoleon.SoVolumeRender_numSlicesControl_set)
    numSlices = _swig_property(_simvoleon.SoVolumeRender_numSlices_get, _simvoleon.SoVolumeRender_numSlices_set)
    viewAlignedSlices = _swig_property(_simvoleon.SoVolumeRender_viewAlignedSlices_get, _simvoleon.SoVolumeRender_viewAlignedSlices_set)
    def setAbortCallback(self, *args):
        """
        setAbortCallback(self, SoVolumeRenderAbortCB func, void userdata = None)
        setAbortCallback(self, SoVolumeRenderAbortCB func)
        setAbortCallback(self, PyObject pyfunc, PyObject userdata)
        """
        return _simvoleon.SoVolumeRender_setAbortCallback(self, *args)

SoVolumeRender_swigregister = _simvoleon.SoVolumeRender_swigregister
SoVolumeRender_swigregister(SoVolumeRender)

def SoVolumeRender_getClassTypeId():
  """SoVolumeRender_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeRender_getClassTypeId()

def SoVolumeRender_initClass():
  """SoVolumeRender_initClass()"""
  return _simvoleon.SoVolumeRender_initClass()

class SoObliqueSlice(coin.SoShape):
    """Proxy of C++ SoObliqueSlice class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoObliqueSlice_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoObliqueSlice_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoObliqueSlice_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoObliqueSlice"""
        this = _simvoleon.new_SoObliqueSlice()
        try: self.this.append(this)
        except: self.this = this
    NEAREST = _simvoleon.SoObliqueSlice_NEAREST
    LINEAR = _simvoleon.SoObliqueSlice_LINEAR
    ALPHA_AS_IS = _simvoleon.SoObliqueSlice_ALPHA_AS_IS
    ALPHA_OPAQUE = _simvoleon.SoObliqueSlice_ALPHA_OPAQUE
    ALPHA_BINARY = _simvoleon.SoObliqueSlice_ALPHA_BINARY
    plane = _swig_property(_simvoleon.SoObliqueSlice_plane_get, _simvoleon.SoObliqueSlice_plane_set)
    interpolation = _swig_property(_simvoleon.SoObliqueSlice_interpolation_get, _simvoleon.SoObliqueSlice_interpolation_set)
    alphaUse = _swig_property(_simvoleon.SoObliqueSlice_alphaUse_get, _simvoleon.SoObliqueSlice_alphaUse_set)
    alternateRep = _swig_property(_simvoleon.SoObliqueSlice_alternateRep_get, _simvoleon.SoObliqueSlice_alternateRep_set)
SoObliqueSlice_swigregister = _simvoleon.SoObliqueSlice_swigregister
SoObliqueSlice_swigregister(SoObliqueSlice)

def SoObliqueSlice_getClassTypeId():
  """SoObliqueSlice_getClassTypeId() -> SoType"""
  return _simvoleon.SoObliqueSlice_getClassTypeId()

def SoObliqueSlice_initClass():
  """SoObliqueSlice_initClass()"""
  return _simvoleon.SoObliqueSlice_initClass()

class SoVolumeIndexedFaceSet(coin.SoIndexedFaceSet):
    """Proxy of C++ SoVolumeIndexedFaceSet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeIndexedFaceSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeIndexedFaceSet_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeIndexedFaceSet_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeIndexedFaceSet"""
        this = _simvoleon.new_SoVolumeIndexedFaceSet()
        try: self.this.append(this)
        except: self.this = this
    clipGeometry = _swig_property(_simvoleon.SoVolumeIndexedFaceSet_clipGeometry_get, _simvoleon.SoVolumeIndexedFaceSet_clipGeometry_set)
    offset = _swig_property(_simvoleon.SoVolumeIndexedFaceSet_offset_get, _simvoleon.SoVolumeIndexedFaceSet_offset_set)
SoVolumeIndexedFaceSet_swigregister = _simvoleon.SoVolumeIndexedFaceSet_swigregister
SoVolumeIndexedFaceSet_swigregister(SoVolumeIndexedFaceSet)

def SoVolumeIndexedFaceSet_getClassTypeId():
  """SoVolumeIndexedFaceSet_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeIndexedFaceSet_getClassTypeId()

def SoVolumeIndexedFaceSet_initClass():
  """SoVolumeIndexedFaceSet_initClass()"""
  return _simvoleon.SoVolumeIndexedFaceSet_initClass()

class SoVolumeFaceSet(coin.SoFaceSet):
    """Proxy of C++ SoVolumeFaceSet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeFaceSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeFaceSet_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeFaceSet_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeFaceSet"""
        this = _simvoleon.new_SoVolumeFaceSet()
        try: self.this.append(this)
        except: self.this = this
    clipGeometry = _swig_property(_simvoleon.SoVolumeFaceSet_clipGeometry_get, _simvoleon.SoVolumeFaceSet_clipGeometry_set)
    offset = _swig_property(_simvoleon.SoVolumeFaceSet_offset_get, _simvoleon.SoVolumeFaceSet_offset_set)
SoVolumeFaceSet_swigregister = _simvoleon.SoVolumeFaceSet_swigregister
SoVolumeFaceSet_swigregister(SoVolumeFaceSet)

def SoVolumeFaceSet_getClassTypeId():
  """SoVolumeFaceSet_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeFaceSet_getClassTypeId()

def SoVolumeFaceSet_initClass():
  """SoVolumeFaceSet_initClass()"""
  return _simvoleon.SoVolumeFaceSet_initClass()

class SoVolumeIndexedTriangleStripSet(coin.SoIndexedTriangleStripSet):
    """Proxy of C++ SoVolumeIndexedTriangleStripSet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeIndexedTriangleStripSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeIndexedTriangleStripSet_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeIndexedTriangleStripSet_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeIndexedTriangleStripSet"""
        this = _simvoleon.new_SoVolumeIndexedTriangleStripSet()
        try: self.this.append(this)
        except: self.this = this
    clipGeometry = _swig_property(_simvoleon.SoVolumeIndexedTriangleStripSet_clipGeometry_get, _simvoleon.SoVolumeIndexedTriangleStripSet_clipGeometry_set)
    offset = _swig_property(_simvoleon.SoVolumeIndexedTriangleStripSet_offset_get, _simvoleon.SoVolumeIndexedTriangleStripSet_offset_set)
SoVolumeIndexedTriangleStripSet_swigregister = _simvoleon.SoVolumeIndexedTriangleStripSet_swigregister
SoVolumeIndexedTriangleStripSet_swigregister(SoVolumeIndexedTriangleStripSet)

def SoVolumeIndexedTriangleStripSet_getClassTypeId():
  """SoVolumeIndexedTriangleStripSet_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeIndexedTriangleStripSet_getClassTypeId()

def SoVolumeIndexedTriangleStripSet_initClass():
  """SoVolumeIndexedTriangleStripSet_initClass()"""
  return _simvoleon.SoVolumeIndexedTriangleStripSet_initClass()

class SoVolumeSkin(coin.SoShape):
    """Proxy of C++ SoVolumeSkin class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeSkin_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeSkin_getTypeId(self)

    def __init__(self): 
        """__init__(self) -> SoVolumeSkin"""
        this = _simvoleon.new_SoVolumeSkin()
        try: self.this.append(this)
        except: self.this = this
    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeSkin_initClass()

    initClass = staticmethod(initClass)
    NEAREST = _simvoleon.SoVolumeSkin_NEAREST
    LINEAR = _simvoleon.SoVolumeSkin_LINEAR
    interpolation = _swig_property(_simvoleon.SoVolumeSkin_interpolation_get, _simvoleon.SoVolumeSkin_interpolation_set)
SoVolumeSkin_swigregister = _simvoleon.SoVolumeSkin_swigregister
SoVolumeSkin_swigregister(SoVolumeSkin)

def SoVolumeSkin_getClassTypeId():
  """SoVolumeSkin_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeSkin_getClassTypeId()

def SoVolumeSkin_initClass():
  """SoVolumeSkin_initClass()"""
  return _simvoleon.SoVolumeSkin_initClass()

class SoVolumeTriangleStripSet(coin.SoTriangleStripSet):
    """Proxy of C++ SoVolumeTriangleStripSet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getClassTypeId():
        """getClassTypeId() -> SoType"""
        return _simvoleon.SoVolumeTriangleStripSet_getClassTypeId()

    getClassTypeId = staticmethod(getClassTypeId)
    def getTypeId(self):
        """getTypeId(self) -> SoType"""
        return _simvoleon.SoVolumeTriangleStripSet_getTypeId(self)

    def initClass():
        """initClass()"""
        return _simvoleon.SoVolumeTriangleStripSet_initClass()

    initClass = staticmethod(initClass)
    def __init__(self): 
        """__init__(self) -> SoVolumeTriangleStripSet"""
        this = _simvoleon.new_SoVolumeTriangleStripSet()
        try: self.this.append(this)
        except: self.this = this
    clipGeometry = _swig_property(_simvoleon.SoVolumeTriangleStripSet_clipGeometry_get, _simvoleon.SoVolumeTriangleStripSet_clipGeometry_set)
    offset = _swig_property(_simvoleon.SoVolumeTriangleStripSet_offset_get, _simvoleon.SoVolumeTriangleStripSet_offset_set)
SoVolumeTriangleStripSet_swigregister = _simvoleon.SoVolumeTriangleStripSet_swigregister
SoVolumeTriangleStripSet_swigregister(SoVolumeTriangleStripSet)

def SoVolumeTriangleStripSet_getClassTypeId():
  """SoVolumeTriangleStripSet_getClassTypeId() -> SoType"""
  return _simvoleon.SoVolumeTriangleStripSet_getClassTypeId()

def SoVolumeTriangleStripSet_initClass():
  """SoVolumeTriangleStripSet_initClass()"""
  return _simvoleon.SoVolumeTriangleStripSet_initClass()



